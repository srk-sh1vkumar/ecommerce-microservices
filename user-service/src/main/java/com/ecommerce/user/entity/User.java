package com.ecommerce.user.entity;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import com.ecommerce.common.constants.SecurityConstants;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import java.time.LocalDateTime;
import java.util.Objects;

/**
 * User entity representing a registered user in the e-commerce system.
 * This class encapsulates all user-related information including authentication
 * credentials, personal details, and system metadata.
 *
 * Key Features:
 * - MongoDB document mapping with optimized indexes
 * - Input validation using Bean Validation annotations
 * - Secure password handling (never exposed in responses)
 * - Role-based access control support
 * - Audit trail with creation timestamp
 * - Email uniqueness constraint for authentication
 *
 * Security Considerations:
 * - Email is indexed and unique for fast authentication lookups
 * - Password should be hashed before storage (handled in service layer)
 * - Role field controls access permissions across the system
 * - Created timestamp helps with audit and compliance requirements
 *
 * Database Schema:
 * - Collection: "users"
 * - Indexes: email (unique), role, createdAt, email+role composite
 * - Document structure follows MongoDB best practices
 *
 * @author Ecommerce Development Team
 * @version 1.0
 * @since 2024-01-01
 */
@Document(collection = "users")
@CompoundIndexes({
    @CompoundIndex(name = "email_role_idx", def = "{'email': 1, 'role': 1}")
})
public class User {
    
    /**
     * Unique identifier for the user document in MongoDB.
     * Auto-generated by MongoDB using ObjectId format.
     */
    @Id
    private String id;
    
    /**
     * User's email address - serves as the primary login identifier.
     * Must be unique across the system and properly formatted.
     * Indexed for fast authentication queries.
     */
    @Indexed(unique = true)
    @NotBlank(message = "Email is required")
    @Email(message = "Email must be valid")
    @Pattern(regexp = SecurityConstants.EMAIL_PATTERN, 
             message = "Email format is invalid")
    private String email;
    
    /**
     * User's password (should be hashed before storage).
     * Never returned in API responses for security.
     * Must meet minimum security requirements.
     */
    @NotBlank(message = "Password is required")
    @Size(min = SecurityConstants.MIN_PASSWORD_LENGTH, 
          max = SecurityConstants.MAX_PASSWORD_LENGTH,
          message = "Password must be between " + SecurityConstants.MIN_PASSWORD_LENGTH + 
                   " and " + SecurityConstants.MAX_PASSWORD_LENGTH + " characters")
    private String password;
    
    /**
     * User's first name for personalization and identification.
     */
    @NotBlank(message = "First name is required")
    @Size(min = 1, max = 50, message = "First name must be between 1 and 50 characters")
    private String firstName;
    
    /**
     * User's last name for complete identification.
     */
    @NotBlank(message = "Last name is required")
    @Size(min = 1, max = 50, message = "Last name must be between 1 and 50 characters")
    private String lastName;
    
    /**
     * User's role in the system for authorization purposes.
     * Defaults to "USER" for standard customers.
     * Can be "ADMIN" for administrative privileges.
     */
    @NotBlank(message = "Role is required")
    @Indexed
    private String role = SecurityConstants.DEFAULT_USER_ROLE;

    /**
     * Timestamp when the user account was created.
     * Used for audit trails, analytics, and compliance.
     * Automatically set to current time on object creation.
     */
    @Indexed
    private LocalDateTime createdAt = LocalDateTime.now();
    
    /**
     * Default constructor required by MongoDB and Jackson.
     * Initializes a new User object with default values.
     */
    public User() {}
    
    /**
     * Constructor for creating a new user with essential information.
     * Automatically sets the creation timestamp and default role.
     * 
     * @param email User's email address (must be unique and valid)
     * @param password User's password (should be hashed before calling this constructor)
     * @param firstName User's first name
     * @param lastName User's last name
     */
    public User(String email, String password, String firstName, String lastName) {
        this.email = email;
        this.password = password;
        this.firstName = firstName;
        this.lastName = lastName;
        this.createdAt = LocalDateTime.now();
        this.role = SecurityConstants.DEFAULT_USER_ROLE;
    }
    
    // Getter and Setter methods with comprehensive documentation
    
    /**
     * Gets the unique identifier for this user.
     * 
     * @return String representing the MongoDB ObjectId
     */
    public String getId() { return id; }
    
    /**
     * Sets the unique identifier for this user.
     * Typically called by MongoDB when persisting the document.
     * 
     * @param id String MongoDB ObjectId
     */
    public void setId(String id) { this.id = id; }
    
    /**
     * Gets the user's email address.
     * 
     * @return String email address used for authentication
     */
    public String getEmail() { return email; }
    
    /**
     * Sets the user's email address.
     * Must be unique across the system and properly formatted.
     * 
     * @param email String email address
     */
    public void setEmail(String email) { this.email = email; }
    
    /**
     * Gets the user's password.
     * Note: In production, this should return null or be excluded from JSON responses.
     * 
     * @return String hashed password
     */
    public String getPassword() { return password; }
    
    /**
     * Sets the user's password.
     * Password should be hashed before calling this method.
     * 
     * @param password String hashed password
     */
    public void setPassword(String password) { this.password = password; }
    
    /**
     * Gets the user's first name.
     * 
     * @return String first name
     */
    public String getFirstName() { return firstName; }
    
    /**
     * Sets the user's first name.
     * 
     * @param firstName String first name (1-50 characters)
     */
    public void setFirstName(String firstName) { this.firstName = firstName; }
    
    /**
     * Gets the user's last name.
     * 
     * @return String last name
     */
    public String getLastName() { return lastName; }
    
    /**
     * Sets the user's last name.
     * 
     * @param lastName String last name (1-50 characters)
     */
    public void setLastName(String lastName) { this.lastName = lastName; }
    
    /**
     * Gets the user's role in the system.
     * 
     * @return String role (USER, ADMIN, etc.)
     */
    public String getRole() { return role; }
    
    /**
     * Sets the user's role in the system.
     * Controls access permissions and functionality.
     * 
     * @param role String role designation
     */
    public void setRole(String role) { this.role = role; }
    
    /**
     * Gets the timestamp when the user account was created.
     * 
     * @return LocalDateTime creation timestamp
     */
    public LocalDateTime getCreatedAt() { return createdAt; }
    
    /**
     * Sets the creation timestamp.
     * Typically only called during object initialization or data migration.
     * 
     * @param createdAt LocalDateTime creation timestamp
     */
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    /**
     * Gets the user's full name by combining first and last names.
     * Convenience method for display purposes.
     * 
     * @return String full name in "FirstName LastName" format
     */
    public String getFullName() {
        return firstName + " " + lastName;
    }
    
    /**
     * Checks if the user has administrative privileges.
     * 
     * @return true if the user has ADMIN role, false otherwise
     */
    public boolean isAdmin() {
        return SecurityConstants.ADMIN_ROLE.equals(role);
    }
    
    /**
     * Compares this user with another object for equality.
     * Two users are considered equal if they have the same email address.
     * 
     * @param o Object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return Objects.equals(email, user.email);
    }
    
    /**
     * Generates hash code for this user based on email address.
     * 
     * @return int hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(email);
    }
    
    /**
     * Returns a string representation of the user.
     * Excludes sensitive information like password.
     * 
     * @return String representation of the user
     */
    @Override
    public String toString() {
        return String.format("User{id='%s', email='%s', firstName='%s', lastName='%s', role='%s', createdAt=%s}",
                id, email, firstName, lastName, role, createdAt);
    }
}