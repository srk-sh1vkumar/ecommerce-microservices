# OpenTelemetry Java Agent Configuration for Intelligent Monitoring Service

# HTTP Header Capture Configuration
otel.instrumentation.http.capture-headers.client.request=x-session-id,x-user-action,x-source-page,x-customer-segment,x-cart-items-count,x-order-value,x-user-email,x-api-version,x-client-version,x-monitoring-correlation-id
otel.instrumentation.http.capture-headers.server.request=x-session-id,x-user-action,x-source-page,x-customer-segment,x-cart-items-count,x-order-value,x-user-email,x-api-version,x-client-version,x-monitoring-correlation-id
otel.instrumentation.http.capture-headers.client.response=x-trace-id,x-span-id,x-monitoring-fix-id
otel.instrumentation.http.capture-headers.server.response=x-trace-id,x-span-id,x-monitoring-fix-id

# Service identification
otel.service.name=intelligent-monitoring-service
otel.service.version=1.0.0
otel.resource.attributes=deployment.environment=docker,service.namespace=ecommerce,service.role=monitoring

# Exporter configuration
otel.exporter.otlp.endpoint=http://otel-collector:4317
otel.exporter.otlp.protocol=grpc

# Propagation and sampling
otel.propagators=tracecontext,baggage,b3,b3multi
otel.traces.sampler=always_on

# Enable instrumentation for monitoring service
otel.instrumentation.spring-webmvc.enabled=true
otel.instrumentation.spring-web.enabled=true
otel.instrumentation.http.enabled=true
otel.instrumentation.servlet.enabled=true
otel.instrumentation.mongodb.enabled=true
otel.instrumentation.logback-appender.enabled=true
otel.instrumentation.quartz.enabled=true

# Custom attributes for monitoring operations
otel.instrumentation.common.experimental.controller.telemetry.enabled=true
otel.instrumentation.common.experimental.view.telemetry.enabled=true

# Database instrumentation
otel.instrumentation.mongo.statement-sanitizer.enabled=true

# JVM metrics
otel.javaagent.experimental.metrics.enabled=true

# Custom span attributes for monitoring correlation
otel.instrumentation.annotations.enabled=true