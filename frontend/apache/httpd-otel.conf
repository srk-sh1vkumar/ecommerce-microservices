# Apache HTTP Configuration with OpenTelemetry
ServerRoot "/usr/local/apache2"
Listen 80

# Load essential modules
LoadModule mpm_event_module modules/mod_mpm_event.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule dir_module modules/mod_dir.so
LoadModule mime_module modules/mod_mime.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule unixd_module modules/mod_unixd.so
LoadModule headers_module modules/mod_headers.so
LoadModule rewrite_module modules/mod_rewrite.so

# Load OpenTelemetry module
LoadModule otel_module modules/mod_otel.so

# Basic settings
ServerName localhost
DocumentRoot "/usr/local/apache2/htdocs"
DirectoryIndex index.html

# OpenTelemetry Configuration
<IfModule mod_otel.c>
    # Enable OpenTelemetry
    OtelTraceEnable On
    
    # Service name for traces
    OtelServiceName "apache-frontend"
    OtelServiceVersion "1.0.0"
    
    # OTLP Exporter configuration (to OTEL Collector)
    OtelExporter otlp
    OtelOtlpEndpoint "http://otel-collector:4318/v1/traces"
    
    # Sampling configuration (sample all requests for demo)
    OtelSampler "always_on"
    
    # Resource attributes
    OtelResourceAttribute "service.name=apache-frontend"
    OtelResourceAttribute "service.version=1.0.0"
    OtelResourceAttribute "deployment.environment=docker"
    OtelResourceAttribute "service.instance.id=apache-frontend-1"
    
    # Trace configuration
    OtelTraceHeaders On
    OtelPropagators "tracecontext,baggage,b3"
    
    # Span naming
    OtelSpanNameFromHttpHeaders On
</IfModule>

# Directory permissions
<Directory "/usr/local/apache2/htdocs">
    Require all granted
    
    # Enable rewrite for SPA routing
    RewriteEngine On
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} !^/api/
    RewriteCond %{REQUEST_URI} !^/health$
    RewriteRule . /index.html [L]
</Directory>

# Health check endpoint
<Location "/health">
    SetHandler server-status
    Require all granted
</Location>

# Proxy API calls to backend services with trace propagation
ProxyPreserveHost On

# Add trace headers to proxied requests
<LocationMatch "^/api/">
    # Propagate OpenTelemetry headers
    RequestHeader set "x-trace-id" "%{OTEL_TRACE_ID}e"
    RequestHeader set "x-span-id" "%{OTEL_SPAN_ID}e"
    
    # CORS headers
    Header always set Access-Control-Allow-Origin "*"
    Header always set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
    Header always set Access-Control-Allow-Headers "Content-Type, Authorization, traceparent, tracestate, x-trace-id, x-span-id"
    
    # Handle preflight requests
    RewriteCond %{REQUEST_METHOD} OPTIONS
    RewriteRule ^(.*)$ $1 [R=200,L]
</LocationMatch>

# API Proxy routes with OpenTelemetry span names
ProxyPass /api/users/ http://user-service:8081/
ProxyPassReverse /api/users/ http://user-service:8081/

ProxyPass /api/products/ http://product-service:8082/
ProxyPassReverse /api/products/ http://product-service:8082/

ProxyPass /api/cart/ http://cart-service:8083/
ProxyPassReverse /api/cart/ http://cart-service:8083/

ProxyPass /api/orders/ http://order-service:8084/
ProxyPassReverse /api/orders/ http://order-service:8084/

# Fallback to API gateway for other endpoints
ProxyPass /api/ http://api-gateway:8080/api/
ProxyPassReverse /api/ http://api-gateway:8080/api/

# Error and access logging with trace IDs
LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\" trace_id=%{x-trace-id}i span_id=%{x-span-id}i" otel_combined
ErrorLog /proc/self/fd/2
CustomLog /proc/self/fd/1 otel_combined

# Security headers with trace context
Header always set X-Content-Type-Options "nosniff"
Header always set X-Frame-Options "DENY"
Header always set X-XSS-Protection "1; mode=block"

# MIME types for common files
<IfModule mod_mime.c>
    TypesConfig conf/mime.types
    AddType application/javascript .js
    AddType text/css .css
    AddType text/html .html
    AddType image/x-icon .ico
</IfModule>