name: Docker Build and Push

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to build (comma-separated, or "all")'
        required: false
        default: 'all'

env:
  REGISTRY: docker.io
  JAVA_VERSION: '17'

jobs:
  # Job 1: Build Docker images for all services
  docker-build:
    name: Build Docker - ${{ matrix.service }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        service:
          - product-service
          - user-service
          - cart-service
          - order-service
          - notification-service
          - api-gateway
          - eureka-server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Build common-lib
        run: |
          cd common-lib
          mvn clean install -DskipTests

      - name: Build ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/ecommerce-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.docker_build.outputs.digest }}"

  # Job 2: Build Docker Compose for local development
  docker-compose-test:
    name: Test Docker Compose
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat > .env << EOF
          MONGO_ROOT_USERNAME=admin
          MONGO_ROOT_PASSWORD=password
          REDIS_PASSWORD=redis123
          JWT_SECRET=test-secret-key-for-ci-pipeline
          STRIPE_API_KEY=sk_test_dummy
          GMAIL_USERNAME=test@example.com
          GMAIL_PASSWORD=dummy
          EOF

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to start..."
          sleep 60

      - name: Check service health
        run: |
          services=("eureka-server:8761" "api-gateway:8080" "product-service:8081" "user-service:8082" "cart-service:8083" "order-service:8084")

          for service in "${services[@]}"; do
            IFS=':' read -r name port <<< "$service"
            echo "Checking $name on port $port..."

            if curl -f -s "http://localhost:$port/actuator/health" > /dev/null 2>&1; then
              echo "‚úÖ $name is healthy"
            else
              echo "‚ùå $name is not responding"
            fi
          done

      - name: View service logs
        if: failure()
        run: |
          docker-compose logs --tail=100

      - name: Stop services
        if: always()
        run: |
          docker-compose down -v

  # Job 3: Vulnerability scanning
  docker-security-scan:
    name: Security Scan - ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: docker-build

    strategy:
      fail-fast: false
      matrix:
        service:
          - product-service
          - user-service
          - cart-service
          - order-service

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/ecommerce-${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Job 4: Update deployment manifests
  update-k8s-manifests:
    name: Update Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update image tags in k8s manifests
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)

          # Update deployment files if they exist
          if [ -d "k8s" ]; then
            find k8s -name "*.yaml" -type f -exec sed -i "s|image: .*/ecommerce-.*:.*|image: ${{ secrets.DOCKER_USERNAME }}/ecommerce-\${SERVICE}:main-${SHA_SHORT}|g" {} \;

            if [ -n "$(git status --porcelain)" ]; then
              git config user.name "GitHub Actions"
              git config user.email "actions@github.com"
              git add k8s/
              git commit -m "chore: Update image tags to main-${SHA_SHORT}"
              git push
            fi
          fi

  # Job 5: Build complete notification
  docker-complete:
    name: Docker Build Complete
    runs-on: ubuntu-latest
    needs: [docker-build, docker-compose-test, docker-security-scan]
    if: success()

    steps:
      - name: Build Success
        run: |
          echo "üê≥ All Docker images built and pushed successfully!"
          echo "‚úÖ Security scans completed"
          echo "üéâ Docker pipeline completed"
