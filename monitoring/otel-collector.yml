# OpenTelemetry Collector Configuration
receivers:
  # OTLP receiver for traces from applications
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Jaeger receiver for compatibility
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268

  # Zipkin receiver for compatibility  
  zipkin:
    endpoint: 0.0.0.0:9411

  # Prometheus metrics receiver
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 15s
          static_configs:
            - targets: ['localhost:8888']

processors:
  # Batch processor for efficiency
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Resource processor to add/modify resource attributes
  resource:
    attributes:
      - key: environment
        value: "development"
        action: upsert
      - key: region
        value: "local"
        action: upsert

  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 512
    check_interval: 1s

  # Sampling processor
  probabilistic_sampler:
    sampling_percentage: 100

  # Span processor for enrichment
  span:
    name:
      to_attributes:
        rules:
          - ^\/api\/(?P<service>[^\/]+).*$ 
        break_after_match: true

  # Attributes processor to capture HTTP headers
  attributes:
    actions:
      # Capture custom business headers
      - key: business.session_id
        from_attribute: http.request.header.x_session_id
        action: upsert
      - key: business.user_action
        from_attribute: http.request.header.x_user_action
        action: upsert
      - key: business.source_page
        from_attribute: http.request.header.x_source_page
        action: upsert
      - key: business.customer_segment
        from_attribute: http.request.header.x_customer_segment
        action: upsert
      - key: business.cart_items_count
        from_attribute: http.request.header.x_cart_items_count
        action: upsert
      - key: business.order_value
        from_attribute: http.request.header.x_order_value
        action: upsert
      - key: business.user_email
        from_attribute: http.request.header.x_user_email
        action: upsert
      - key: business.api_version
        from_attribute: http.request.header.x_api_version
        action: upsert
      - key: business.client_version
        from_attribute: http.request.header.x_client_version
        action: upsert

exporters:
  # Tempo exporter for traces
  otlp/tempo:
    endpoint: http://tempo:4317
    tls:
      insecure: true
    headers:
      X-Scope-OrgID: "tenant-1"

  # Prometheus exporter for metrics
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: "otel"
    const_labels:
      environment: "development"

  # Logging exporter for debugging
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 200

  # OTLP exporter for Jaeger compatibility (via Tempo)
  otlp/jaeger:
    endpoint: http://tempo:4317
    tls:
      insecure: true

extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133
    path: "/health"

  # Performance profiling
  pprof:
    endpoint: 0.0.0.0:1777

  # Memory ballast for stability
  memory_ballast:
    size_mib: 64

service:
  extensions: [health_check, pprof, memory_ballast]
  
  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp, jaeger, zipkin]
      processors: [memory_limiter, resource, attributes, span, batch, probabilistic_sampler]
      exporters: [otlp/tempo, logging]

    # Metrics pipeline  
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resource, batch]
      exporters: [prometheus, logging]

    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [logging]

  telemetry:
    logs:
      level: "info"
    metrics:
      address: "0.0.0.0:8888"